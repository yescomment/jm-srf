---

---
<section id="window">
  <div id="sigma-container"></div>
</section>

<style lang:scss>
  #window {
    height: 100vh;
    background: transparent;
  }

  #sigma-container {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>

<script>
import { createNodeImageProgram } from "@sigma/node-image";
import Graph from "graphology";
import ForceSupervisor from "graphology-layout-force/worker";
import Sigma from "sigma";

    const container = document.getElementById("sigma-container");

    const graph = new Graph();

    const RED = "#FA4F40";
    const BLUE = "#727EE0";
    const GREEN = "#5DB346";

    graph.addNode("neighborhoods", { size: 15, label: "Neighborhoods", type: "image", image: "./user.svg", color: RED });
    graph.addNode("business", { size: 15, label: "Business", type: "image", image: "./user.svg", color: RED });
    graph.addNode("housing", { size: 15, label: "Housing", type: "image", image: "./user.svg", color: RED });
    graph.addNode("education", { size: 15, label: "Education", type: "image", image: "./city.svg", color: BLUE });
    graph.addNode("law", { size: 15, label: "Law", type: "image", image: "./city.svg", color: BLUE });
    graph.addNode("health", { size: 7, label: "Health", type: "image", color: GREEN });
    graph.addNode("government", { size: 7, label: "Government", type: "image", color: GREEN });
    graph.addNode("identity", { size: 7, label: "Identity", type: "image", color: GREEN });

    graph.addEdge("neighborhoods", "housing", { type: "line", label: "contain", size: 5 });
    graph.addEdge("housing", "identity", { type: "line", label: "builds belonging", size: 5 });
    graph.addEdge("law", "business", { type: "arrow", label: "protects", size: 5 });
    graph.addEdge("education", "law", { type: "arrow", label: "ensures quality", size: 5 });
    graph.addEdge("identity", "neighborhoods", { type: "arrow", label: "defines uniqueness", size: 5 });
    graph.addEdge("health", "business", { type: "arrow", label: "is an opportunity for", size: 5 });
    graph.addEdge("government", "law", { type: "arrow", label: "enforces", size: 5 });
    graph.addEdge("law", "government", { type: "arrow", label: "limits", size: 5 });

    graph.nodes().forEach((node, i) => {
      const angle = (i * 2 * Math.PI) / graph.order;
      graph.setNodeAttribute(node, "x", 100 * Math.cos(angle));
      graph.setNodeAttribute(node, "y", 100 * Math.sin(angle));
    });

    const renderer = new Sigma(graph, container, {
      // We don't have to declare edgeProgramClasses here, because we only use the default ones ("line" and "arrow")
      nodeProgramClasses: {
        image: createNodeImageProgram(),
        // gradient: NodeGradientProgram,
      },
      renderEdgeLabels: true,
    });

    // Create the spring layout and start it
    const layout = new ForceSupervisor(graph);
    layout.start();
</script>