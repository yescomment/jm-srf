---

---
<section id="window">
  <div id="sigma-container"></div>
</section>

<style lang:scss>
  #window {
    height: 100vh;
    background: transparent;
  }

  #sigma-container {
    position: fixed;
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>

<script>
  import { createNodeImageProgram } from "@sigma/node-image";
  import EdgeCurveProgram from "@sigma/edge-curve"
  import Graph from "graphology";
  import ForceSupervisor from "graphology-layout-force/worker";
  import Sigma from "sigma";

  const container = document.getElementById("sigma-container");
  const graph = new Graph();

  const defaultNode = {
    size: 20,
    type: "circle",
    forceLabel: true,
  }

  const defaultEdge = {
    type: "arrow",
    size: 5,
    forceLabel: true,
  }

  graph.addNode("neighborhoods", {...defaultNode, label: "Neighborhoods"});
  graph.addNode("business",      {...defaultNode, label: "Business"});
  graph.addNode("housing",       {...defaultNode, label: "Housing"});
  graph.addNode("education",     {...defaultNode, label: "Education"});
  graph.addNode("law",           {...defaultNode, label: "Law"});
  graph.addNode("health",        {...defaultNode, label: "Health"});
  graph.addNode("government",    {...defaultNode, label: "Government"});
  graph.addNode("identity",      {...defaultNode, label: "Identity"});

  graph.addEdge("neighborhoods", "housing",  {...defaultEdge, label: "contain"});
  graph.addEdge("housing", "identity",       {...defaultEdge, label: "builds belonging"});
  graph.addEdge("law", "business",           {...defaultEdge, label: "protects"});
  graph.addEdge("education", "law",          {...defaultEdge, label: "ensures quality"});
  graph.addEdge("identity", "neighborhoods", {...defaultEdge, label: "defines uniqueness"});
  graph.addEdge("health", "business",        {...defaultEdge, label: "is an opportunity for"});
  graph.addEdge("government", "law",         {...defaultEdge, label: "enforces"});
  graph.addEdge("law", "government",         {...defaultEdge, label: "limits"});
  graph.addEdge("law", "housing",            {...defaultEdge, label: "protects"});

  graph.nodes().forEach((node, i) => {
    const angle = (i * 2 * Math.PI) / graph.order;
    graph.setNodeAttribute(node, "x", 100 * Math.cos(angle));
    graph.setNodeAttribute(node, "y", 100 * Math.sin(angle));
  });


  // RENDERING

  const renderer = new Sigma(graph, container, {
    nodeProgramClasses: {
      image: createNodeImageProgram(),
    },
    edgeProgramClasses: {
      curved: EdgeCurveProgram,
    },
    renderEdgeLabels: true,
  });

  let draggedNode: string | null = null;
  let isDragging = false;

  renderer.on("downNode", (e) => {
    isDragging = true;
    draggedNode = e.node;
    graph.setNodeAttribute(draggedNode, "highlighted", true);
  });

  // On mouse move, if the drag mode is enabled, we change the position of the draggedNode
  renderer.getMouseCaptor().on("mousemovebody", (e) => {
    if (!isDragging || !draggedNode) return;

    // Get new position of node
    const pos = renderer.viewportToGraph(e);

    graph.setNodeAttribute(draggedNode, "x", pos.x);
    graph.setNodeAttribute(draggedNode, "y", pos.y);

    // Prevent sigma to move camera:
    e.preventSigmaDefault();
    e.original.preventDefault();
    e.original.stopPropagation();
  });

  // On mouse up, we reset the autoscale and the dragging mode
  renderer.getMouseCaptor().on("mouseup", () => {
    if (draggedNode) {
      graph.removeNodeAttribute(draggedNode, "highlighted");
    }
    isDragging = false;
    draggedNode = null;
  });

  // Disable the autoscale at the first down interaction
  renderer.getMouseCaptor().on("mousedown", () => {
    if (!renderer.getCustomBBox()) renderer.setCustomBBox(renderer.getBBox());
  });

  // Create the spring layout and start it
  const layout = new ForceSupervisor(graph, {
    settings: {
      attraction: .000008,
      repulsion: 0.9,
    }
  });

  layout.start();
</script>