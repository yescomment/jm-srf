---
import CommunityGraphDialog from './CommunityGraphDialog.astro'

import iconHouse from '@material-symbols/svg-400/rounded/house.svg'
import iconOtherHouses from '@material-symbols/svg-400/rounded/other_houses.svg'
import iconSchool from '@material-symbols/svg-400/rounded/school.svg'
import iconFactory from '@material-symbols/svg-400/rounded/factory.svg'
import iconLaw from '@material-symbols/svg-400/rounded/gavel.svg'
import iconHealing from '@material-symbols/svg-400/rounded/healing.svg'
import iconMedicalInfo from '@material-symbols/svg-400/rounded/medical_information.svg'
import iconGovernment from '@material-symbols/svg-400/rounded/account_balance.svg'
import iconIdentity from '@material-symbols/svg-400/rounded/fingerprint.svg'
import iconWages from '@material-symbols/svg-400/rounded/payments.svg'
import iconGrocery from '@material-symbols/svg-400/rounded/grocery.svg'

const NODES = [
  {
    name: 'Neighborhoods',
    icon: iconOtherHouses.src,
  },
  {
    name: 'Housing',
    icon: iconHouse.src,
  },
  {
    name: 'Education',
    icon: iconSchool.src,
  },
  {
    name: 'Manufacturing',
    icon: iconFactory.src,
  },
  {
    name: 'Law',
    icon: iconLaw.src,
  },
  {
    name: 'Healthcare',
    icon: iconHealing.src,
  },
  {
    name: 'Health Insurance',
    icon: iconMedicalInfo.src,
  },
  {
    name: 'Legislators',
    icon: iconGovernment.src,
  },
  {
    name: 'Identity',
    icon: iconIdentity.src,
  },
  {
    name: 'Wages',
    icon: iconWages.src,
  },
  {
    name: 'Essential Retail',
    icon: iconGrocery.src,
  },
]

type SDG = {
  number: number; // 1-17
  notes: string[];
}

type Investment = {
  title: string;
  link: string;
}

export type EdgeDef = {
  from: string;
  label: string;
  to: string;
  sdgs: SDG[];
  investments: Investment[];
}

/* SDGs quickref
   1 : 'No Poverty',
   2 : 'Zero Hunger',
   3 : 'Good Health',
   4 : 'Quality Education',
   5 : 'Gender Equality',
   6 : 'Clean Water',
   7 : 'Affordable Energy',
   8 : 'Decent Work',
   9 : 'Industry, Innovation, & Infrastructure',
  10 : 'Reduced Inequalities',
  11 : 'Sustainable Cities',
  12 : 'Responsible Consumption',
  13 : 'Climate Action',
  14 : 'Life Below Water',
  15 : 'Life on Land',
  16 : 'Peace, Justice, & Strong Institutions',
  17 : 'Partnerships',
*/

const EDGES: Array<EdgeDef> = [
  {
    from: 'Housing',
    label: 'forms',
    to: 'Neighborhoods',
    sdgs: [
      {
        number: 10,
        notes: [
          'Accessible design becomes more efficient with more residents.',
          'Housing available for all means fewer without a home.',
        ],
      },
      {
        number: 11,
        notes: [
          'More efficient infrastructure with shorter distances and higher usage.',
        ],
      },
      {
        number: 16,
        notes: [
          'Affordable housing brings more permanent residents who build generational belonging.',
          'Informed residents improve and regluate their own living standards.',
        ],
      },
    ],
    investments: [
      {
        title: 'Invest in affordable housing projects.',
      },
    ],
  },
  {
    from: 'Housing',
    label: 'builds belonging',
    to: 'Identity',
    sdgs: [
      {
        number: 3,
        notes: [
          'Community members who feel they own their community, build that community.'
        ],
      },
      {
        number: 16,
        notes: [
          'Volunteer culture fosters neighbors who know each othersâ€™ needs.',
          'Community participation strengthens civic engagement.',
          'Civic belonging promotes peaceful and inclusive society.',
        ],
      },
    ],
    investments: [
      'Develop community centers and support services.',
      'Fund initiatives promoting civic engagement.',
      'Fund community-building events and initiatives.',
    ],
  },
  {
    from: 'Legislators',
    label: 'enact',
    to: 'Law',
    sdgs: [
      {
        number: 10,
        notes: [
          'Formalize the reduction of inequality and promotion justice.',
        ],
      },
      {
        number: 16,
        notes: [
          'Prevent justice from becoming mere charity.',
        ],
      },
    ],
    investments: [
      'Support diversity and anti-discrimination programs.',
      'Promote diversity training.'
    ],
  },
  {
    from: 'Law',
    label: 'ensures safe',
    to: 'Manufacturing',
    sdgs: [
      {
        number: 13,
        notes: [
          'Regulation protects the envoriment from industry.',
          'Climate protection incentivizes innovation in materials and processes.',
        ]
      },
      {
        number: 14,
        notes: [
          'Water supplies are protected from pollution',
        ]
      },
      {
        number: 15,
        notes: [
          'Land is seen as a limited, shared resource.',
        ]
      }
    ],
    investments: [],
  },
  {
    from: 'Education',
    label: 'ensures quality',
    to: 'Law',
    sdgs: [
      {
        number: 16,
        notes: [
          'Comprehensive violence prevention strategies require research and wisdom.'
        ]
      }
    ],
    investments: [
      'Support diversity and anti-discrimination programs.',
      'Promote diversity training.',
      'Develop and support violence prevention programs.',
      'Fund scholarship programs and support affordable education.',
    ],
  },
  {
    from: 'Education',
    label: 'empowers self-',
    to: 'Healthcare',
    sdgs: [
      {
        number: 3,
        notes: [
          'Public health education campaigns promotes health literacy.'
        ]
      }
    ],
    investments: [
      'Fund public health education initiatives.',
      'Fund scholarship programs and support affordable education.',
    ],
  },
  {
    from: 'Identity',
    label: 'defines uniqueness',
    to: 'Neighborhoods',
    investments: [
      'Fund early childhood education infrastructure.',
      'Fund grants for artists, makers, and local connectors.',
      'Fund scholarship programs and support affordable education.',
    ],
  },
  {
    from: 'Healthcare',
    label: 'is an opportunity for',
    to: 'Manufacturing',
    sdgs: [
      {
        number: 3,
        notes: [
          'Public health education campaigns promotes health literacy.'
        ]
      }
    ],
    investments: [],
  },
  {
    from: 'Law',
    label: 'protects',
    to: 'Housing',
    // TODO
  },
  {
    from: 'Essential Retail',
    label: 'pays employees',
    to: 'Wages',
    sdgs: [
      {
        number: 1,
        notes: [
          'Reduce poverty with decent work.'
        ]
      },
      {
        number: 8,
        notes: [
          'Quality jobs with fair wages allow families to live with dignity.'
        ]
      }
    ],
    investments: [
      'Support businesses that pay Investible wages.',
    ],
  },
  {
    from: 'Essential Retail',
    label: 'lowers reliance on',
    to: 'Healthcare',
    sdgs: [
      {
        number: 2,
        notes: [
          'Urban farming and local food markets form resilient, distributed food networks.',
        ]
      },
      {
        number: 11,
        notes: [
          'Sustainable agriculture is integral to resilient cities.',
        ]
      },
    ],
    investments: [
      'Invest in positive social determinants of health.',
      'Invest in subsidized healthy food.',
      'Invest in urban agriculture and local food systems.',
    ],
  },
  {
    from: 'Healthcare',
    label: 'bills to',
    to: 'Health Insurance',
    sdgs: [
      {
        number: 3,
        notes: [
          'Ensure healthy lives and promote well-being.'
        ]
      },
    ],
    investments: [
      'Support public health insurance programs.',
      'Invest in positive social determinants of health.',
      'Invest in community health center infrastructure.',
      'Provide subsidies for essential, healthy goods and services.',
      'Support the development of universal healthcare systems.',
    ],
  },
  {
    from: 'Manufacturing',
    label: 'wholesales to',
    to: 'Essential Retail',
    sdgs: [],
    investments: [],
  },
]
---
<head>
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css"> <!-- animatedModel.js -->
</head>
<community-graph data-nodes={JSON.stringify(NODES)} data-edges={JSON.stringify(EDGES)}>
  <section id="window">
    <div id="sigma-container"></div>
  </section>

  {EDGES.map(edge => <CommunityGraphDialog {...edge} />)}

<community-graph/>

<style lang:scss>
  #window {
    height: 100vh;
    background: transparent;
  }

  #sigma-container {
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>

<script>
  import { createNodeImageProgram } from "@sigma/node-image";
  import EdgeCurveProgram from "@sigma/edge-curve"
  import Graph from "graphology";
  import ForceSupervisor from "graphology-layout-force/worker";
  import Sigma from "sigma";

  const container = document.getElementById("sigma-container");
  const graph = new Graph();

  class CommunityGraph extends HTMLElement {
    constructor() {
      super();
      if (!window.edgeIdToModalId || Object.keys(window.edgeIdToModalId).length === 0) {
        window.edgeIdToModalId = {}
      }

      if (this.dataset?.nodes?.length) {
        JSON.parse(this.dataset.nodes).forEach(node => {
          graph.addNode(node.name, {
            size: 20,
            color: '#edede9',
            type: "image",
            forceLabel: true,
            label: node.name,
            image: node.icon,
          });
        })
      }

      if (this.dataset?.edges?.length) {
        JSON.parse(this.dataset.edges).forEach(edge => {
          let edgeId = graph.addEdge(edge.from, edge.to, {
            id: `${edge.from}-${edge.to}`,
            type: "arrow",
            color: '#223749',
            size: 5,
            forceLabel: true,
            label: edge.label,
          });

          let modalId = `modal-${edge.from}-${edge.to}`.replace(/[^a-zA-Z0-9-_]/g, '')
          window.edgeIdToModalId[edgeId] = modalId
        })
      }
    }
  }

  customElements.define('community-graph', CommunityGraph);

  // RENDERING

  // scatter nodes to start
  graph.nodes().forEach((node, i) => {
    const angle = (i * 2 * Math.PI) / graph.order;
    graph.setNodeAttribute(node, "x", 100 * Math.cos(angle));
    graph.setNodeAttribute(node, "y", 100 * Math.sin(angle));
  });

  // while running
  let hoveredEdge = null
  const renderer = new Sigma(graph, container, {
    nodeProgramClasses: {
      image: createNodeImageProgram(),
    },
    edgeProgramClasses: {
      curved: EdgeCurveProgram,
    },
    renderEdgeLabels: true,
    enableEdgeEvents: true,
    edgeReducer(edge, data) {
      const res = { ...data };
      if (edge === hoveredEdge) res.color = "#719aaa";
      return res;
    },
  });

  let draggedNode: string | null = null;
  let isDragging = false;

  // disable scrollwheel zoom
  container.addEventListener("wheel", (e) => {
    console.log('wheel')
    e.stopPropagation();
  }, true)

  renderer.on("downNode", (e) => {
    isDragging = true;
    draggedNode = e.node;
    graph.setNodeAttribute(draggedNode, "highlighted", true);
  });

  renderer.on("enterEdge", ({ edge }) => {
    hoveredEdge = edge;
    renderer.refresh();
  });

  renderer.on("leaveEdge", ({ edge }) => {
    hoveredEdge = null;
    renderer.refresh();
  });

  // On mouse move, if the drag mode is enabled, we change the position of the draggedNode
  renderer.getMouseCaptor().on("mousemovebody", (e) => {
    if (!isDragging || !draggedNode) return;

    // Get new position of node
    const pos = renderer.viewportToGraph(e);

    graph.setNodeAttribute(draggedNode, "x", pos.x);
    graph.setNodeAttribute(draggedNode, "y", pos.y);

    // Prevent sigma to move camera:
    e.preventSigmaDefault();
    e.original.preventDefault();
    e.original.stopPropagation();
  });

  // On mouse up, we reset the autoscale and the dragging mode
  renderer.getMouseCaptor().on("mouseup", () => {
    if (draggedNode) {
      graph.removeNodeAttribute(draggedNode, "highlighted");
    }
    isDragging = false;
    draggedNode = null;
  });

  // Disable the autoscale at the first down interaction
  renderer.getMouseCaptor().on("mousedown", () => {
    if (!renderer.getCustomBBox()) renderer.setCustomBBox(renderer.getBBox());
  });

  // Create the spring layout and start it
  const layout = new ForceSupervisor(graph, {
    settings: {
      attraction: .000008,
      repulsion: 0.9,
    }
  });

  // POPUP MODALS
  Object.values(window.edgeIdToModalId).map(modalId => {
    $(`#open-${modalId}`).animatedModal();
  })

  renderer.on("clickNode", ({ node }) => {
    const connectedEdges = graph.filterEdges((e) => graph.extremities(e).some((n) => n === node))
    const randomEdge = connectedEdges[Math.floor(Math.random() * connectedEdges.length)];
    const modalId = window.edgeIdToModalId[randomEdge]
    openModal(modalId)
  });

  renderer.on("clickEdge", ({ edge }) => {
    const modalId = window.edgeIdToModalId[edge]
    openModal(modalId)
  });

  function openModal(modalId: string) {
    document.querySelector(`#open-${modalId}`).click()
  }

  function closeAllModals() {
    document.querySelector(`[id^='close-${modalId}'`).click()
  }

  function startLayout() {
    layout.start();
  }

  // start graph movement when scrolled to or after 20sec, whichever sooner
  const graphVisibleObserver = new IntersectionObserver(startLayout)
  graphVisibleObserver.observe(container)
  setTimeout(startLayout, 20000)
</script>

<!-- animatedModal -->
<script is:inline src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script is:inline src="/scripts/animatedModal.js"></script>
