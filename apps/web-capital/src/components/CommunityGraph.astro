---
import iconHouse from '@material-symbols/svg-400/rounded/house.svg'
import iconOtherHouses from '@material-symbols/svg-400/rounded/other_houses.svg'
import iconSchool from '@material-symbols/svg-400/rounded/school.svg'
import iconFactory from '@material-symbols/svg-400/rounded/factory.svg'
import iconLaw from '@material-symbols/svg-400/rounded/gavel.svg'
import iconHealing from '@material-symbols/svg-400/rounded/healing.svg'
import iconGovernment from '@material-symbols/svg-400/rounded/account_balance.svg'
import iconIdentity from '@material-symbols/svg-400/rounded/fingerprint.svg'
import iconWages from '@material-symbols/svg-400/rounded/payments.svg'
import iconPolice from '@material-symbols/svg-400/rounded/local_police.svg'
import iconGrocery from '@material-symbols/svg-400/rounded/grocery.svg'

const NODES = [
  {
    name: 'Neighborhoods',
    icon: iconOtherHouses.src,
  },
  {
    name: 'Housing',
    icon: iconHouse.src,
  },
  {
    name: 'Education',
    icon: iconSchool.src,
  },
  {
    name: 'Manufacturing',
    icon: iconFactory.src,
  },
  {
    name: 'Law',
    icon: iconLaw.src,
  },
  {
    name: 'Healthcare',
    icon: iconHealing.src,
  },
  {
    name: 'Legislators',
    icon: iconGovernment.src,
  },
  {
    name: 'Police',
    icon: iconIdentity.src,
  },
  {
    name: 'Identity',
    icon: iconWages.src,
  },
  {
    name: 'Wages',
    icon: iconPolice.src,
  },
  {
    name: 'Essential Retail',
    icon: iconGrocery.src,
  },
]

const EDGES = [
  {
    from: 'Neighborhoods',
    to: 'Housing',
    label: 'contain',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Housing',
    to: 'Identity',
    label: 'builds belonging',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Legislators',
    to: 'Law',
    label: 'enact',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Law',
    to: 'Manufacturing',
    label: 'protects',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Education',
    to: 'Law',
    label: 'ensures quality',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Identity',
    to: 'Neighborhoods',
    label: 'defines uniqueness',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Healthcare',
    to: 'Manufacturing',
    label: 'is an opportunity for',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Police',
    to: 'Law',
    label: 'enforces',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Legislators',
    to: 'Police',
    label: 'limits',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Law',
    to: 'Housing',
    label: 'protects',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Essential Retail',
    to: 'Wages',
    label: 'pays employees',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Essential Retail',
    to: 'Healthcare',
    label: 'lowers reliance on',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
  {
    from: 'Manufacturing',
    to: 'Essential Retail',
    label: 'wholesales to',
    sdgs: [],
    invesments: [],
    header: '',
    text: '',
  },
]
---
<head>
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css"> <!-- animatedModel.js -->
</head>
<community-graph data-nodes={JSON.stringify(NODES)} data-edges={JSON.stringify(EDGES)}>
  <section id="window">
    <div id="sigma-container"></div>
  </section>
  <section>
    <!--DEMO01-->
    <div id="animatedModal">
        <!--THIS IS IMPORTANT! to close the modal, the class name has to match the name given on the ID  class="close-animatedModal" -->
        <div class="close-animatedModal">
            CLOSE MODAL
        </div>
        <div class="modal-content">
                  <!--Your modal content goes here-->
        </div>
    </div>

    <a id="demo01" href="#animatedModal">DEMO01</a>
  </section>
<community-graph/>

<style lang:scss>
  #window {
    height: 100vh;
    background: transparent;
  }

  #sigma-container {
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>

<script>
  import { createNodeImageProgram } from "@sigma/node-image";
  import EdgeCurveProgram from "@sigma/edge-curve"
  import Graph from "graphology";
  import ForceSupervisor from "graphology-layout-force/worker";
  import Sigma from "sigma";

  const container = document.getElementById("sigma-container");
  const graph = new Graph();

  class CommunityGraph extends HTMLElement {
    constructor() {
      super();

      console.log(this.dataset.nodes)

      JSON.parse(this.dataset.nodes).forEach(node => {
        graph.addNode(
          node.name, {
          size: 20,
          color: '#edede9',
          type: "image",
          forceLabel: true,
          label: node.label,
          image: node.icon,
        });
      })

      JSON.parse(this.dataset.edges).forEach(edge => {
        graph.addEdge(edge.from, edge.to, {
          type: "arrow",
          color: '#323835',
          size: 5,
          forceLabel: true,
          label: edge.label,
        });
      })
    }
  }

  customElements.define('community-graph', CommunityGraph);

  graph.nodes().forEach((node, i) => {
    const angle = (i * 2 * Math.PI) / graph.order;
    graph.setNodeAttribute(node, "x", 100 * Math.cos(angle));
    graph.setNodeAttribute(node, "y", 100 * Math.sin(angle));
  });


  // RENDERING

  const renderer = new Sigma(graph, container, {
    nodeProgramClasses: {
      image: createNodeImageProgram(),
    },
    edgeProgramClasses: {
      curved: EdgeCurveProgram,
    },
    renderEdgeLabels: true,
    mouseWheelEnabled: false,
    enableEdgeHovering: true,
    enableEdgeClicking: true,
  });

  let draggedNode: string | null = null;
  let isDragging = false;

  renderer.on("downNode", (e) => {
    isDragging = true;
    draggedNode = e.node;
    graph.setNodeAttribute(draggedNode, "highlighted", true);
  });

  // On mouse move, if the drag mode is enabled, we change the position of the draggedNode
  renderer.getMouseCaptor().on("mousemovebody", (e) => {
    if (!isDragging || !draggedNode) return;

    // Get new position of node
    const pos = renderer.viewportToGraph(e);

    graph.setNodeAttribute(draggedNode, "x", pos.x);
    graph.setNodeAttribute(draggedNode, "y", pos.y);

    // Prevent sigma to move camera:
    e.preventSigmaDefault();
    e.original.preventDefault();
    e.original.stopPropagation();
  });

  // On mouse up, we reset the autoscale and the dragging mode
  renderer.getMouseCaptor().on("mouseup", () => {
    if (draggedNode) {
      graph.removeNodeAttribute(draggedNode, "highlighted");
    }
    isDragging = false;
    draggedNode = null;
  });

  // Disable the autoscale at the first down interaction
  renderer.getMouseCaptor().on("mousedown", () => {
    if (!renderer.getCustomBBox()) renderer.setCustomBBox(renderer.getBBox());
  });

  // Create the spring layout and start it
  const layout = new ForceSupervisor(graph, {
    settings: {
      attraction: .000008,
      repulsion: 0.9,
    }
  });

  layout.start();
</script>

<!-- animatedModal -->
<script is:inline src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script is:inline src="/scripts/animatedModal.js"></script>
<script>
  $("#demo01").animatedModal();
</script>