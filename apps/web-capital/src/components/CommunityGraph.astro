---
import iconHouse from '@material-symbols/svg-400/rounded/house.svg'
import iconOtherHouses from '@material-symbols/svg-400/rounded/other_houses.svg'
import iconSchool from '@material-symbols/svg-400/rounded/school.svg'
import iconFactory from '@material-symbols/svg-400/rounded/factory.svg'
import iconLaw from '@material-symbols/svg-400/rounded/gavel.svg'
import iconHealing from '@material-symbols/svg-400/rounded/healing.svg'
import iconGovernment from '@material-symbols/svg-400/rounded/account_balance.svg'
import iconIdentity from '@material-symbols/svg-400/rounded/fingerprint.svg'
import iconWages from '@material-symbols/svg-400/rounded/payments.svg'
import iconPolice from '@material-symbols/svg-400/rounded/local_police.svg'
import iconGrocery from '@material-symbols/svg-400/rounded/grocery.svg'

const NODES = [
  {
    name: 'Neighborhoods',
    icon: iconOtherHouses.src,
  },
  {
    name: 'Housing',
    icon: iconHouse.src,
  },
  {
    name: 'Education',
    icon: iconSchool.src,
  },
  {
    name: 'Manufacturing',
    icon: iconFactory.src,
  },
  {
    name: 'Law',
    icon: iconLaw.src,
  },
  {
    name: 'Healthcare',
    icon: iconHealing.src,
  },
  {
    name: 'Legislators',
    icon: iconGovernment.src,
  },
  {
    name: 'Police',
    icon: iconIdentity.src,
  },
  {
    name: 'Identity',
    icon: iconWages.src,
  },
  {
    name: 'Wages',
    icon: iconPolice.src,
  },
  {
    name: 'Essential Retail',
    icon: iconGrocery.src,
  },
]

type SDG = {
  title: string;
  deets: string[];
}

type Investment = {
  title: string;
  link: string;
}

type EdgeDef = {
  from: string;
  label: string;
  to: string;
  sdgs: SDG[];
  investments: Investment[];
}

const EDGES: Array<EdgeDef> = [
  {
    from: 'Housing',
    label: 'forms',
    to: 'Neighborhoods',
    sdgs: [
      {
        title: 'Reduced Inequalities',
        deets: [
          'Accessible design becomes more efficient with more residents.',
          'Housing available for all means fewer without a home.',
        ],
      },
      {
        title: 'Sustainable Cities & Communities',
        deets: [
          'More efficient infrastructure with shorter distances and higher usage.'
        ],
      },
    ],
    investments: [
      {
        title: '',
        link: '',
      },
    ],
  },
  {
    from: 'Housing',
    to: 'Identity',
    label: 'builds belonging',
    sdgs: [
      {
        title: 'Good Health & Wellbeing',
        deets: [],
      },
    ],
    investments: [],
  },
  {
    from: 'Legislators',
    to: 'Law',
    label: 'enact',
    sdgs: [
      {
        title: 'Reduced Inequalities',
        deets: [],
      },
    ],
    investments: [],
  },
  {
    from: 'Law',
    to: 'Manufacturing',
    label: 'protects',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Education',
    to: 'Law',
    label: 'ensures quality',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Identity',
    to: 'Neighborhoods',
    label: 'defines uniqueness',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Healthcare',
    to: 'Manufacturing',
    label: 'is an opportunity for',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Police',
    to: 'Law',
    label: 'enforces',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Legislators',
    to: 'Police',
    label: 'limits',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Law',
    to: 'Housing',
    label: 'protects',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Essential Retail',
    to: 'Wages',
    label: 'pays employees',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Essential Retail',
    to: 'Healthcare',
    label: 'lowers reliance on',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
  {
    from: 'Manufacturing',
    to: 'Essential Retail',
    label: 'wholesales to',
    sdgs: [{
      title: '',
      deets: [],
    }],
    investments: [],
  },
]
---
<head>
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css"> <!-- animatedModel.js -->
</head>
<community-graph data-nodes={JSON.stringify(NODES)} data-edges={JSON.stringify(EDGES)}>
  <section id="window">
    <div id="sigma-container"></div>
  </section>

  {EDGES.map(edge => {

    const modalId = `modal-${edge.from}-${edge.to}`.replace(/[^a-zA-Z0-9-_]/g, '')

    return <div class="popup" id={modalId}>
      <a id={`open-${modalId}`} href={`#${modalId}`}></a>
      <div class={`close-${modalId}`}>
        ×
      </div>
      <h1>{edge.from} {edge.label} → {edge.to}</h1>
      <h2><a href="/whealth+#sdgs" target="_blank">SDGs</a> Activated</h2>
      {edge.sdgs.map(sdg =>
        <>
          <h3>{sdg.title}</h3>
          {sdg?.deets.map(deet => <p>{deet}</p>)}
        </>
      )}
      <p>Housing available for all means fewer without a home.</p>

      <h3>Sustainable Cities & Communities</h3>
      <p>More efficient infrastructure with shorter distances and higher usage.</p>

      <h3>Active Investments</h3>
      <ul>
        {edge.investments.map(investment => <li>{investment}</li>)}
      </ul>
    </div>
  })}

<community-graph/>

<style lang:scss>
  #window {
    height: 100vh;
    background: transparent;
  }

  #sigma-container {
    top: 0;
    left: 0;
    height: 100vh;
    width: 100vw;
  }
</style>

<script>
  import { createNodeImageProgram } from "@sigma/node-image";
  import EdgeCurveProgram from "@sigma/edge-curve"
  import Graph from "graphology";
  import ForceSupervisor from "graphology-layout-force/worker";
  import Sigma from "sigma";

  const container = document.getElementById("sigma-container");
  const graph = new Graph();

  class CommunityGraph extends HTMLElement {
    constructor() {
      super();
      if (!window.edgeIdToModalId || Object.keys(window.edgeIdToModalId).length === 0) {
        window.edgeIdToModalId = {}
      }

      if (this.dataset?.nodes?.length) {
        JSON.parse(this.dataset.nodes).forEach(node => {
          graph.addNode(node.name, {
            size: 20,
            color: '#edede9',
            type: "image",
            forceLabel: true,
            label: node.name,
            image: node.icon,
          });
        })
      }

      if (this.dataset?.edges?.length) {
        JSON.parse(this.dataset.edges).forEach(edge => {
          let edgeId = graph.addEdge(edge.from, edge.to, {
            id: `${edge.from}-${edge.to}`,
            type: "arrow",
            color: '#223749',
            size: 5,
            forceLabel: true,
            label: edge.label,
          });

          let modalId = `modal-${edge.from}-${edge.to}`.replace(/[^a-zA-Z0-9-_]/g, '')
          window.edgeIdToModalId[edgeId] = modalId
        })
      }
    }
  }

  customElements.define('community-graph', CommunityGraph);

  // RENDERING

  // scatter nodes to start
  graph.nodes().forEach((node, i) => {
    const angle = (i * 2 * Math.PI) / graph.order;
    graph.setNodeAttribute(node, "x", 100 * Math.cos(angle));
    graph.setNodeAttribute(node, "y", 100 * Math.sin(angle));
  });

  // while running
  let hoveredEdge = null
  const renderer = new Sigma(graph, container, {
    nodeProgramClasses: {
      image: createNodeImageProgram(),
    },
    edgeProgramClasses: {
      curved: EdgeCurveProgram,
    },
    renderEdgeLabels: true,
    enableEdgeEvents: true,
    edgeReducer(edge, data) {
      const res = { ...data };
      if (edge === hoveredEdge) res.color = "#719aaa";
      return res;
    },
  });

  let draggedNode: string | null = null;
  let isDragging = false;

  // disable scrollwheel zoom
  container.addEventListener("wheel", (e) => {
    console.log('wheel')
    e.stopPropagation();
  }, true)

  renderer.on("downNode", (e) => {
    isDragging = true;
    draggedNode = e.node;
    graph.setNodeAttribute(draggedNode, "highlighted", true);
  });

  renderer.on("enterEdge", ({ edge }) => {
    hoveredEdge = edge;
    renderer.refresh();
  });

  renderer.on("leaveEdge", ({ edge }) => {
    hoveredEdge = null;
    renderer.refresh();
  });

  // On mouse move, if the drag mode is enabled, we change the position of the draggedNode
  renderer.getMouseCaptor().on("mousemovebody", (e) => {
    if (!isDragging || !draggedNode) return;

    // Get new position of node
    const pos = renderer.viewportToGraph(e);

    graph.setNodeAttribute(draggedNode, "x", pos.x);
    graph.setNodeAttribute(draggedNode, "y", pos.y);

    // Prevent sigma to move camera:
    e.preventSigmaDefault();
    e.original.preventDefault();
    e.original.stopPropagation();
  });

  // On mouse up, we reset the autoscale and the dragging mode
  renderer.getMouseCaptor().on("mouseup", () => {
    if (draggedNode) {
      graph.removeNodeAttribute(draggedNode, "highlighted");
    }
    isDragging = false;
    draggedNode = null;
  });

  // Disable the autoscale at the first down interaction
  renderer.getMouseCaptor().on("mousedown", () => {
    if (!renderer.getCustomBBox()) renderer.setCustomBBox(renderer.getBBox());
  });

  // Create the spring layout and start it
  const layout = new ForceSupervisor(graph, {
    settings: {
      attraction: .000008,
      repulsion: 0.9,
    }
  });

  // POPUP MODALS
  Object.values(window.edgeIdToModalId).map(modalId => {
    $(`#open-${modalId}`).animatedModal();
  })

  renderer.on("clickEdge", ({ edge }) => {
    const modalId = window.edgeIdToModalId[edge]
    document.querySelector(`#open-${modalId}`).click()
  });

  layout.start();
</script>

<!-- animatedModal -->
<script is:inline src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
<script is:inline src="/scripts/animatedModal.js"></script>
